# Trigger the pipeline to run whenever a commit to the main branch is made.
trigger:
  - main

# Use a custom agent pool called "Unity Windows" that manages custom agents
# that have the required Unity versions installed and any required SDKs for target platforms
# configured.
pool:
  name: Unity Windows Agents

# Adds a shared pipeline variables library to the pipeline that contains
# authentication variables for activating a Unity editor with a Unity Plus / Pro seat.
variables:
  - group: unity-activation-variables

steps:
  #cleanup for unity build
  - task: DeleteFiles@1
    inputs:
      SourceFolder: "$(Build.ArtifactStagingDirectory)"
      Contents: "**/*"

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\Library'
      Contents: "**/*"
  - task: CmdLine@2
    inputs:
      script: 'if EXIST "$(Build.BinariesDirectory)\Library\" move "$(Build.BinariesDirectory)\Library" "$(Build.Repository.LocalPath)\Library"'

  - task: UnityBuildTask@3
    inputs:
      buildTarget: standalone
      outputPath: $(Build.BinariesDirectory)
      outputFileName: $(Build.Repository.Name)

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: "$(Build.BinariesDirectory)"
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.Repository.Name)_$(Build.BuildId).zip"
      replaceExistingArchive: true

  # Finally publish all items in artifact staging to the Azure Pipelines
  # artifact storage. They will be available for sharing and/or further processing there.
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: $(Build.Repository.Name)
      publishLocation: Container

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\Library'
      Contents: "**/*"
  - task: CmdLine@2
    inputs:
      script: 'move "$(Build.Repository.LocalPath)\Library" "$(Build.BinariesDirectory)\Library"'
